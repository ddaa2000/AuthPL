type token =
  | IMPORT of (Support.Error.info)
  | TBOT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | TTOP of (Support.Error.info)
  | AS of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | REF of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | RREF of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | SSOURCE of (Support.Error.info)
  | SSINK of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | INERT of (Support.Error.info)
  | TYPE of (Support.Error.info)
  | NAT of (Support.Error.info)
  | UP of (Support.Error.info)
  | DOWN of (Support.Error.info)
  | REQUIRE of (Support.Error.info)
  | AUAS of (Support.Error.info)
  | ROOT of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 89 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* IMPORT *);
  258 (* TBOT *);
  259 (* LAMBDA *);
  260 (* TTOP *);
  261 (* AS *);
  262 (* USTRING *);
  263 (* UNIT *);
  264 (* REF *);
  265 (* UUNIT *);
  266 (* RREF *);
  267 (* CASE *);
  268 (* OF *);
  269 (* LET *);
  270 (* IN *);
  271 (* FIX *);
  272 (* LETREC *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* BOOL *);
  279 (* TIMESFLOAT *);
  280 (* SSOURCE *);
  281 (* SSINK *);
  282 (* UFLOAT *);
  283 (* SUCC *);
  284 (* PRED *);
  285 (* ISZERO *);
  286 (* INERT *);
  287 (* TYPE *);
  288 (* NAT *);
  289 (* UP *);
  290 (* DOWN *);
  291 (* REQUIRE *);
  292 (* AUAS *);
  293 (* ROOT *);
  294 (* UCID *);
  295 (* LCID *);
  296 (* INTV *);
  297 (* FLOATV *);
  298 (* STRINGV *);
  299 (* APOSTROPHE *);
  300 (* DQUOTE *);
  301 (* ARROW *);
  302 (* BANG *);
  303 (* BARGT *);
  304 (* BARRCURLY *);
  305 (* BARRSQUARE *);
  306 (* COLON *);
  307 (* COLONCOLON *);
  308 (* COLONEQ *);
  309 (* COLONHASH *);
  310 (* COMMA *);
  311 (* DARROW *);
  312 (* DDARROW *);
  313 (* DOT *);
    0 (* EOF *);
  314 (* EQ *);
  315 (* EQEQ *);
  316 (* EXISTS *);
  317 (* GT *);
  318 (* HASH *);
  319 (* LCURLY *);
  320 (* LCURLYBAR *);
  321 (* LEFTARROW *);
  322 (* LPAREN *);
  323 (* LSQUARE *);
  324 (* LSQUAREBAR *);
  325 (* LT *);
  326 (* RCURLY *);
  327 (* RPAREN *);
  328 (* RSQUARE *);
  329 (* SEMI *);
  330 (* SLASH *);
  331 (* STAR *);
  332 (* TRIANGLE *);
  333 (* USCORE *);
  334 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\005\000\005\000\003\000\008\000\008\000\008\000\010\000\009\000\
\011\000\011\000\007\000\007\000\007\000\007\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\012\000\012\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\018\000\018\000\018\000\018\000\
\014\000\014\000\020\000\020\000\021\000\021\000\017\000\017\000\
\017\000\022\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\016\000\016\000\024\000\
\023\000\023\000\025\000\025\000\026\000\026\000\006\000\006\000\
\000\000"

let yylen = "\002\000\
\001\000\003\000\002\000\003\000\004\000\004\000\005\000\003\000\
\004\000\002\000\001\000\001\000\001\000\001\000\004\000\005\000\
\002\000\002\000\001\000\002\000\002\000\002\000\003\000\001\000\
\001\000\001\000\001\000\003\000\001\000\001\000\003\000\001\000\
\001\000\003\000\001\000\001\000\008\000\008\000\003\000\004\000\
\006\000\006\000\006\000\001\000\002\000\002\000\002\000\002\000\
\003\000\002\000\002\000\002\000\003\000\001\000\003\000\003\000\
\000\000\001\000\001\000\003\000\003\000\001\000\003\000\003\000\
\001\000\001\000\003\000\001\000\001\000\003\000\007\000\003\000\
\003\000\001\000\003\000\003\000\004\000\001\000\003\000\007\000\
\000\000\001\000\001\000\003\000\003\000\001\000\000\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\011\000\001\000\089\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\069\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\065\000\000\000\000\000\000\000\000\000\000\000\068\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\005\000\000\000\000\000\000\000\086\000\000\000\082\000\
\000\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\070\000\
\012\000\013\000\014\000\000\000\000\000\000\000\000\000\072\000\
\073\000\000\000\024\000\025\000\026\000\027\000\000\000\029\000\
\000\000\000\000\032\000\033\000\030\000\000\000\000\000\000\000\
\000\000\019\000\000\000\088\000\000\000\010\000\076\000\000\000\
\075\000\000\000\067\000\000\000\000\000\063\000\064\000\053\000\
\056\000\055\000\000\000\000\000\017\000\018\000\000\000\000\000\
\040\000\000\000\000\000\000\000\000\000\020\000\021\000\022\000\
\000\000\062\000\000\000\058\000\000\000\000\000\000\000\077\000\
\000\000\000\000\085\000\084\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\000\000\023\000\028\000\034\000\009\000\000\000\000\000\000\000\
\000\000\015\000\000\000\079\000\041\000\042\000\043\000\061\000\
\060\000\000\000\000\000\000\000\016\000\000\000\071\000\037\000\
\038\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\070\000\066\000\063\000\146\000\088\000\
\089\000\090\000\091\000\114\000\115\000\147\000\040\000\137\000\
\041\000\042\000\043\000\148\000\149\000\075\000\071\000\138\000\
\072\000\073\000"

let yysindex = "\015\000\
\001\000\000\000\241\254\234\254\000\000\000\000\000\000\220\254\
\246\254\000\000\005\255\001\000\142\002\006\255\000\000\221\254\
\238\254\196\000\186\002\223\254\196\000\186\002\239\254\245\254\
\196\000\196\000\196\000\196\000\252\254\009\255\244\254\249\254\
\000\000\000\000\196\000\230\002\186\002\025\255\000\000\066\000\
\014\255\000\000\019\255\005\255\024\255\027\255\243\254\000\000\
\014\255\066\255\026\255\031\255\014\255\065\255\243\254\243\254\
\131\000\014\255\014\255\014\255\098\002\098\002\000\000\098\002\
\186\002\000\000\243\254\014\255\035\255\000\000\028\255\000\000\
\041\255\000\000\023\255\038\255\064\003\014\255\250\254\098\002\
\061\255\061\255\000\000\098\002\098\002\015\255\243\254\000\000\
\000\000\000\000\000\000\032\255\186\002\186\002\186\002\000\000\
\000\000\014\255\000\000\000\000\000\000\000\000\223\255\000\000\
\223\255\223\255\000\000\000\000\000\000\071\002\098\002\071\002\
\030\255\000\000\059\255\000\000\029\255\000\000\000\000\186\002\
\000\000\230\002\000\000\186\002\196\000\000\000\000\000\000\000\
\000\000\000\000\034\255\043\255\000\000\000\000\237\254\072\255\
\000\000\036\255\112\255\114\255\110\255\000\000\000\000\000\000\
\080\255\000\000\063\255\000\000\077\255\064\255\078\255\000\000\
\223\255\243\254\000\000\000\000\079\255\243\254\243\254\243\254\
\061\255\084\255\032\255\186\002\186\002\186\002\098\002\000\000\
\071\002\000\000\000\000\000\000\000\000\133\255\087\255\088\255\
\075\255\000\000\113\255\000\000\000\000\000\000\000\000\000\000\
\000\000\098\002\186\002\186\002\000\000\090\255\000\000\000\000\
\000\000\097\255\064\003\196\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\082\255\040\255\000\000\
\000\000\000\000\000\000\091\255\000\000\000\000\000\000\170\255\
\005\000\000\000\196\255\000\000\000\000\000\000\000\000\000\000\
\070\000\000\000\000\000\000\000\135\000\000\000\000\000\000\000\
\000\000\200\000\009\001\074\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\139\001\012\003\000\000\000\000\000\000\
\092\255\000\000\000\000\000\000\000\000\204\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\093\255\000\000\099\255\
\000\000\000\000\129\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\239\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\227\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\255"

let yygindex = "\000\000\
\154\000\000\000\012\000\248\255\000\000\000\000\207\255\219\255\
\000\000\000\000\195\255\014\000\241\255\060\000\181\255\010\000\
\238\255\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\052\000\000\000"

let yytablesize = 1157
let yytable = "\049\000\
\006\000\125\000\053\000\045\000\039\000\051\000\057\000\058\000\
\059\000\060\000\050\000\113\000\116\000\054\000\117\000\001\000\
\068\000\096\000\097\000\129\000\130\000\078\000\014\000\080\000\
\086\000\160\000\010\000\011\000\074\000\119\000\128\000\059\000\
\126\000\127\000\131\000\132\000\012\000\064\000\098\000\013\000\
\059\000\046\000\005\000\052\000\068\000\065\000\068\000\133\000\
\134\000\135\000\044\000\161\000\087\000\081\000\082\000\083\000\
\118\000\047\000\055\000\068\000\068\000\150\000\061\000\076\000\
\056\000\080\000\062\000\080\000\067\000\068\000\079\000\080\000\
\080\000\084\000\068\000\068\000\085\000\092\000\068\000\068\000\
\068\000\068\000\095\000\093\000\139\000\140\000\141\000\142\000\
\094\000\143\000\144\000\068\000\120\000\123\000\122\000\124\000\
\068\000\121\000\086\000\178\000\136\000\152\000\068\000\153\000\
\154\000\068\000\078\000\080\000\068\000\158\000\162\000\155\000\
\068\000\163\000\080\000\157\000\173\000\184\000\159\000\196\000\
\175\000\176\000\177\000\080\000\080\000\164\000\080\000\165\000\
\166\000\167\000\169\000\080\000\168\000\035\000\170\000\035\000\
\191\000\186\000\171\000\174\000\035\000\179\000\035\000\187\000\
\188\000\189\000\035\000\035\000\035\000\035\000\194\000\190\000\
\195\000\008\000\087\000\181\000\182\000\183\000\035\000\057\000\
\081\000\083\000\057\000\035\000\035\000\015\000\172\000\035\000\
\035\000\035\000\035\000\151\000\180\000\156\000\185\000\000\000\
\000\000\078\000\192\000\193\000\035\000\036\000\035\000\036\000\
\000\000\035\000\000\000\036\000\036\000\035\000\000\000\035\000\
\000\000\000\000\035\000\000\000\000\000\035\000\035\000\035\000\
\035\000\035\000\054\000\000\000\035\000\000\000\035\000\054\000\
\000\000\054\000\000\000\000\000\000\000\054\000\054\000\054\000\
\054\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\099\000\054\000\100\000\000\000\101\000\000\000\036\000\102\000\
\000\000\000\000\054\000\054\000\054\000\054\000\000\000\036\000\
\036\000\000\000\036\000\000\000\104\000\000\000\000\000\054\000\
\107\000\054\000\000\000\000\000\054\000\000\000\108\000\000\000\
\054\000\003\000\054\000\000\000\109\000\054\000\000\000\000\000\
\054\000\054\000\054\000\044\000\054\000\000\000\000\000\000\000\
\044\000\054\000\044\000\000\000\000\000\000\000\044\000\044\000\
\044\000\044\000\000\000\000\000\000\000\110\000\000\000\000\000\
\111\000\000\000\044\000\112\000\000\000\004\000\005\000\000\000\
\000\000\000\000\000\000\044\000\044\000\044\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\000\000\044\000\000\000\000\000\044\000\000\000\
\017\000\044\000\044\000\044\000\046\000\044\000\000\000\000\000\
\000\000\046\000\044\000\046\000\000\000\023\000\024\000\046\000\
\046\000\046\000\046\000\000\000\000\000\000\000\000\000\029\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\048\000\032\000\033\000\034\000\046\000\046\000\046\000\046\000\
\000\000\000\000\000\000\000\000\000\000\077\000\000\000\000\000\
\000\000\046\000\000\000\046\000\000\000\000\000\000\000\000\000\
\036\000\000\000\046\000\037\000\046\000\000\000\038\000\046\000\
\000\000\017\000\046\000\046\000\046\000\048\000\046\000\000\000\
\000\000\000\000\048\000\046\000\048\000\000\000\023\000\024\000\
\048\000\048\000\048\000\048\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\000\000\048\000\000\000\000\000\000\000\
\000\000\048\000\032\000\033\000\034\000\048\000\048\000\048\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\079\000\048\000\000\000\000\000\000\000\
\000\000\036\000\000\000\048\000\037\000\048\000\000\000\038\000\
\048\000\000\000\017\000\048\000\048\000\048\000\050\000\048\000\
\000\000\000\000\000\000\050\000\048\000\050\000\000\000\023\000\
\024\000\050\000\050\000\050\000\050\000\000\000\000\000\000\000\
\000\000\029\000\000\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\048\000\032\000\033\000\034\000\050\000\050\000\
\050\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\050\000\039\000\050\000\000\000\000\000\
\039\000\039\000\036\000\000\000\050\000\037\000\050\000\000\000\
\038\000\050\000\000\000\000\000\050\000\050\000\050\000\051\000\
\050\000\000\000\000\000\000\000\051\000\050\000\051\000\000\000\
\000\000\000\000\051\000\051\000\051\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\051\000\000\000\
\000\000\000\000\000\000\039\000\000\000\000\000\000\000\051\000\
\051\000\051\000\051\000\000\000\039\000\039\000\000\000\039\000\
\000\000\000\000\000\000\078\000\051\000\078\000\051\000\000\000\
\000\000\078\000\078\000\000\000\000\000\051\000\000\000\051\000\
\000\000\000\000\051\000\000\000\000\000\051\000\051\000\051\000\
\052\000\051\000\000\000\000\000\000\000\052\000\051\000\052\000\
\000\000\000\000\000\000\052\000\052\000\052\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\078\000\000\000\052\000\
\000\000\000\000\000\000\000\000\078\000\000\000\000\000\000\000\
\052\000\052\000\052\000\052\000\000\000\078\000\078\000\000\000\
\078\000\000\000\000\000\000\000\000\000\052\000\000\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\052\000\000\000\000\000\052\000\000\000\000\000\052\000\052\000\
\052\000\047\000\052\000\000\000\000\000\000\000\047\000\052\000\
\047\000\000\000\000\000\000\000\047\000\047\000\047\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\047\000\047\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\047\000\000\000\000\000\047\000\000\000\000\000\047\000\
\047\000\047\000\045\000\047\000\000\000\000\000\000\000\045\000\
\047\000\045\000\000\000\000\000\000\000\045\000\045\000\045\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\045\000\000\000\000\000\045\000\000\000\000\000\
\045\000\045\000\045\000\049\000\045\000\000\000\000\000\000\000\
\049\000\045\000\049\000\000\000\000\000\000\000\049\000\049\000\
\049\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\049\000\049\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\
\099\000\049\000\100\000\049\000\101\000\000\000\049\000\102\000\
\103\000\049\000\049\000\049\000\000\000\049\000\000\000\000\000\
\000\000\000\000\049\000\000\000\104\000\000\000\105\000\106\000\
\107\000\000\000\000\000\099\000\000\000\100\000\108\000\101\000\
\000\000\000\000\102\000\103\000\109\000\145\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\104\000\
\000\000\105\000\106\000\107\000\000\000\000\000\000\000\000\000\
\000\000\108\000\000\000\000\000\000\000\110\000\000\000\109\000\
\111\000\000\000\000\000\112\000\000\000\000\000\000\000\000\000\
\016\000\000\000\000\000\000\000\017\000\018\000\000\000\000\000\
\019\000\000\000\020\000\000\000\021\000\000\000\022\000\000\000\
\110\000\023\000\024\000\111\000\025\000\000\000\112\000\000\000\
\026\000\027\000\028\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\031\000\032\000\033\000\034\000\
\000\000\000\000\000\000\035\000\016\000\000\000\000\000\000\000\
\017\000\018\000\000\000\000\000\019\000\000\000\020\000\000\000\
\021\000\000\000\022\000\000\000\036\000\023\000\024\000\037\000\
\025\000\000\000\038\000\000\000\026\000\027\000\028\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\032\000\033\000\034\000\000\000\000\000\000\000\035\000\
\016\000\000\000\000\000\000\000\017\000\018\000\000\000\000\000\
\019\000\000\000\020\000\000\000\021\000\000\000\022\000\000\000\
\036\000\023\000\024\000\037\000\025\000\000\000\038\000\000\000\
\026\000\027\000\028\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\069\000\032\000\033\000\034\000\
\068\000\000\000\068\000\035\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\068\000\000\000\000\000\000\000\036\000\000\000\000\000\037\000\
\000\000\068\000\038\000\000\000\000\000\000\000\068\000\068\000\
\000\000\000\000\068\000\068\000\068\000\068\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\000\000\068\000\000\000\000\000\068\000\000\000\017\000\018\000\
\000\000\000\000\068\000\000\000\000\000\068\000\021\000\000\000\
\068\000\068\000\000\000\023\000\024\000\000\000\025\000\000\000\
\000\000\000\000\026\000\027\000\028\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\032\000\
\033\000\034\000\000\000\000\000\000\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\000\000\037\000\000\000\000\000\038\000"

let yycheck = "\018\000\
\000\000\077\000\021\000\039\001\013\000\039\001\025\000\026\000\
\027\000\028\000\019\000\061\000\062\000\022\000\064\000\001\000\
\035\000\055\000\056\000\081\000\082\000\040\000\011\000\005\001\
\038\001\045\001\042\001\050\001\037\000\067\000\080\000\061\001\
\039\001\040\001\084\000\085\000\073\001\050\001\057\000\050\001\
\070\001\077\001\038\001\077\001\005\001\058\001\007\001\033\001\
\034\001\087\000\045\001\071\001\066\001\035\001\036\001\044\000\
\065\000\076\001\076\001\020\001\021\001\111\000\067\001\039\001\
\076\001\012\001\058\001\014\001\076\001\030\001\057\001\018\001\
\019\001\050\001\035\001\036\001\050\001\012\001\039\001\040\001\
\041\001\042\001\018\001\058\001\093\000\094\000\095\000\103\000\
\058\001\105\000\106\000\052\001\058\001\071\001\054\001\058\001\
\057\001\070\001\038\001\161\000\069\001\072\001\063\001\045\001\
\076\001\066\001\125\000\054\001\069\001\076\001\039\001\120\000\
\073\001\078\001\061\001\124\000\154\000\167\000\076\001\195\000\
\158\000\159\000\160\000\070\001\071\001\014\001\073\001\014\001\
\019\001\050\001\054\001\078\001\070\001\005\001\071\001\007\001\
\186\000\005\001\061\001\061\001\012\001\058\001\014\001\057\001\
\057\001\071\001\018\001\019\001\020\001\021\001\061\001\039\001\
\056\001\073\001\073\001\164\000\165\000\166\000\030\001\061\001\
\070\001\070\001\070\001\035\001\036\001\012\000\153\000\039\001\
\040\001\041\001\042\001\112\000\163\000\122\000\169\000\255\255\
\255\255\196\000\187\000\188\000\052\001\012\001\054\001\014\001\
\255\255\057\001\255\255\018\001\019\001\061\001\255\255\063\001\
\255\255\255\255\066\001\255\255\255\255\069\001\070\001\071\001\
\072\001\073\001\007\001\255\255\076\001\255\255\078\001\012\001\
\255\255\014\001\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\054\001\
\002\001\030\001\004\001\255\255\006\001\255\255\061\001\009\001\
\255\255\255\255\039\001\040\001\041\001\042\001\255\255\070\001\
\071\001\255\255\073\001\255\255\022\001\255\255\255\255\052\001\
\026\001\054\001\255\255\255\255\057\001\255\255\032\001\255\255\
\061\001\001\001\063\001\255\255\038\001\066\001\255\255\255\255\
\069\001\070\001\071\001\007\001\073\001\255\255\255\255\255\255\
\012\001\078\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\063\001\255\255\255\255\
\066\001\255\255\030\001\069\001\255\255\037\001\038\001\255\255\
\255\255\255\255\255\255\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\052\001\255\255\054\001\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\255\255\063\001\255\255\255\255\066\001\255\255\
\007\001\069\001\070\001\071\001\007\001\073\001\255\255\255\255\
\255\255\012\001\078\001\014\001\255\255\020\001\021\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\030\001\
\255\255\255\255\255\255\030\001\255\255\255\255\255\255\255\255\
\039\001\040\001\041\001\042\001\039\001\040\001\041\001\042\001\
\255\255\255\255\255\255\255\255\255\255\052\001\255\255\255\255\
\255\255\052\001\255\255\054\001\255\255\255\255\255\255\255\255\
\063\001\255\255\061\001\066\001\063\001\255\255\069\001\066\001\
\255\255\007\001\069\001\070\001\071\001\007\001\073\001\255\255\
\255\255\255\255\012\001\078\001\014\001\255\255\020\001\021\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\030\001\255\255\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\039\001\040\001\041\001\
\042\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\052\001\057\001\054\001\255\255\255\255\255\255\
\255\255\063\001\255\255\061\001\066\001\063\001\255\255\069\001\
\066\001\255\255\007\001\069\001\070\001\071\001\007\001\073\001\
\255\255\255\255\255\255\012\001\078\001\014\001\255\255\020\001\
\021\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\030\001\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\255\255\039\001\040\001\041\001\042\001\039\001\040\001\
\041\001\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\012\001\052\001\014\001\054\001\255\255\255\255\
\018\001\019\001\063\001\255\255\061\001\066\001\063\001\255\255\
\069\001\066\001\255\255\255\255\069\001\070\001\071\001\007\001\
\073\001\255\255\255\255\255\255\012\001\078\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\054\001\255\255\030\001\255\255\
\255\255\255\255\255\255\061\001\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\255\255\070\001\071\001\255\255\073\001\
\255\255\255\255\255\255\012\001\052\001\014\001\054\001\255\255\
\255\255\018\001\019\001\255\255\255\255\061\001\255\255\063\001\
\255\255\255\255\066\001\255\255\255\255\069\001\070\001\071\001\
\007\001\073\001\255\255\255\255\255\255\012\001\078\001\014\001\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\255\255\
\255\255\255\255\255\255\255\255\255\255\054\001\255\255\030\001\
\255\255\255\255\255\255\255\255\061\001\255\255\255\255\255\255\
\039\001\040\001\041\001\042\001\255\255\070\001\071\001\255\255\
\073\001\255\255\255\255\255\255\255\255\052\001\255\255\054\001\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\255\255\
\063\001\255\255\255\255\066\001\255\255\255\255\069\001\070\001\
\071\001\007\001\073\001\255\255\255\255\255\255\012\001\078\001\
\014\001\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\255\255\
\054\001\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\063\001\255\255\255\255\066\001\255\255\255\255\069\001\
\070\001\071\001\007\001\073\001\255\255\255\255\255\255\012\001\
\078\001\014\001\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\039\001\040\001\041\001\042\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\052\001\
\255\255\054\001\255\255\255\255\255\255\255\255\255\255\255\255\
\061\001\255\255\063\001\255\255\255\255\066\001\255\255\255\255\
\069\001\070\001\071\001\007\001\073\001\255\255\255\255\255\255\
\012\001\078\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\052\001\255\255\054\001\255\255\255\255\255\255\255\255\255\255\
\002\001\061\001\004\001\063\001\006\001\255\255\066\001\009\001\
\010\001\069\001\070\001\071\001\255\255\073\001\255\255\255\255\
\255\255\255\255\078\001\255\255\022\001\255\255\024\001\025\001\
\026\001\255\255\255\255\002\001\255\255\004\001\032\001\006\001\
\255\255\255\255\009\001\010\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\255\255\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\255\255\255\255\063\001\255\255\038\001\
\066\001\255\255\255\255\069\001\255\255\255\255\255\255\255\255\
\003\001\255\255\255\255\255\255\007\001\008\001\255\255\255\255\
\011\001\255\255\013\001\255\255\015\001\255\255\017\001\255\255\
\063\001\020\001\021\001\066\001\023\001\255\255\069\001\255\255\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\255\255\255\255\255\255\046\001\003\001\255\255\255\255\255\255\
\007\001\008\001\255\255\255\255\011\001\255\255\013\001\255\255\
\015\001\255\255\017\001\255\255\063\001\020\001\021\001\066\001\
\023\001\255\255\069\001\255\255\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\040\001\041\001\042\001\255\255\255\255\255\255\046\001\
\003\001\255\255\255\255\255\255\007\001\008\001\255\255\255\255\
\011\001\255\255\013\001\255\255\015\001\255\255\017\001\255\255\
\063\001\020\001\021\001\066\001\023\001\255\255\069\001\255\255\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\039\001\040\001\041\001\042\001\
\005\001\255\255\007\001\046\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\255\255\255\255\255\255\063\001\255\255\255\255\066\001\
\255\255\030\001\069\001\255\255\255\255\255\255\035\001\036\001\
\255\255\255\255\039\001\040\001\041\001\042\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\052\001\
\255\255\054\001\255\255\255\255\057\001\255\255\007\001\008\001\
\255\255\255\255\063\001\255\255\255\255\066\001\015\001\255\255\
\069\001\070\001\255\255\020\001\021\001\255\255\023\001\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\039\001\040\001\
\041\001\042\001\255\255\255\255\255\255\046\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\063\001\255\255\
\255\255\066\001\255\255\255\255\069\001"

let yynames_const = "\
  "

let yynames_block = "\
  IMPORT\000\
  TBOT\000\
  LAMBDA\000\
  TTOP\000\
  AS\000\
  USTRING\000\
  UNIT\000\
  REF\000\
  UUNIT\000\
  RREF\000\
  CASE\000\
  OF\000\
  LET\000\
  IN\000\
  FIX\000\
  LETREC\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  TIMESFLOAT\000\
  SSOURCE\000\
  SSINK\000\
  UFLOAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  INERT\000\
  TYPE\000\
  NAT\000\
  UP\000\
  DOWN\000\
  REQUIRE\000\
  AUAS\000\
  ROOT\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 136 "parser.mly"
      ( fun ctx -> [],ctx )
# 683 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 138 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 695 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 145 "parser.mly"
                   ( fun ctx -> (Import(_2.v)),ctx )
# 703 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Perset) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 147 "parser.mly"
      ( fun ctx -> (let t = _3 ctx in Eval(tmInfo t, _1 ctx,t)),ctx )
# 712 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'Perset) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 149 "parser.mly"
      ( fun ctx -> (let p = _1 ctx in ((Bind(_3.i,_1 ctx,_3.v,_4 ctx p)), addname ctx _3.v)) )
# 722 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'Perset) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 151 "parser.mly"
      ( fun ctx -> ((Bind(_3.i,_1 ctx,_3.v, _4 ctx)), addname ctx _3.v) )
# 732 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'Perset) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Perset) in
    Obj.repr(
# 153 "parser.mly"
      ( fun ctx -> ((PersetRelDecl(_3 ctx, _5 ctx)),ctx))
# 743 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Perset) in
    Obj.repr(
# 155 "parser.mly"
      ( fun ctx -> (PersetDecl(_3 ctx),ctx))
# 752 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Auth) in
    Obj.repr(
# 160 "parser.mly"
      ( fun ctx p -> VarBind(_2 ctx, _4 ctx))
# 762 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 162 "parser.mly"
      ( fun ctx p -> TmAbbBind(_2 ctx, None, None, p) )
# 770 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 168 "parser.mly"
        ( fun ctx -> Perset(_1.v) )
# 777 "parser.ml"
               : 'Perset))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowAuth) in
    Obj.repr(
# 173 "parser.mly"
        ( _1 )
# 784 "parser.ml"
               : 'Auth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CompAuth) in
    Obj.repr(
# 175 "parser.mly"
        ( _1 )
# 791 "parser.ml"
               : 'Auth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AAuth) in
    Obj.repr(
# 177 "parser.mly"
        ( fun ctx -> _1 ctx )
# 798 "parser.ml"
               : 'Auth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Auth) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'AAuth) in
    Obj.repr(
# 181 "parser.mly"
        ( fun ctx -> AuComp(_2 ctx, _4 ctx) )
# 808 "parser.ml"
               : 'CompAuth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'Auth) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Auth) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 185 "parser.mly"
        ( fun ctx -> AuArr(_2 ctx, _4 ctx) )
# 819 "parser.ml"
               : 'ArrowAuth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 189 "parser.mly"
        ( fun ctx -> AuAtomUp(_1.v))
# 827 "parser.ml"
               : 'AAuth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 191 "parser.mly"
        ( fun ctx -> AuAtomDown(_1.v))
# 835 "parser.ml"
               : 'AAuth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 197 "parser.mly"
                ( _1 )
# 842 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 199 "parser.mly"
      ( fun ctx -> TyRef(_2 ctx) )
# 850 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 201 "parser.mly"
      ( fun ctx -> TySource(_2 ctx) )
# 858 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 203 "parser.mly"
      ( fun ctx -> TySink(_2 ctx) )
# 866 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 208 "parser.mly"
           ( _2 )
# 875 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 210 "parser.mly"
      ( fun ctx -> TyBot )
# 882 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 212 "parser.mly"
      ( fun ctx -> TyTop )
# 889 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 214 "parser.mly"
      ( fun ctx -> TyString )
# 896 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 216 "parser.mly"
      ( fun ctx -> TyUnit )
# 903 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 218 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 913 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 221 "parser.mly"
      ( fun ctx -> TyBool )
# 920 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 223 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 931 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 229 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 941 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 232 "parser.mly"
      ( fun ctx -> TyFloat )
# 948 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 234 "parser.mly"
      ( fun ctx -> TyNat )
# 955 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 240 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 964 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 242 "parser.mly"
            ( _1 )
# 971 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 246 "parser.mly"
      ( _1 )
# 978 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Auth) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 248 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx, _8 ctx1) )
# 994 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Auth) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 252 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx, _8 ctx1) )
# 1010 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 256 "parser.mly"
      ( fun ctx -> TmAssign(_2, _1 ctx, _3 ctx) )
# 1019 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 258 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 1030 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 261 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 1042 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 263 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 1054 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 270 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 1066 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 274 "parser.mly"
      ( _1 )
# 1073 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 276 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 1084 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 281 "parser.mly"
      ( fun ctx -> TmRef(_1, _2 ctx) )
# 1092 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 283 "parser.mly"
      ( fun ctx -> TmDeref(_1, _2 ctx) )
# 1100 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 285 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 1109 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 288 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 1118 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 290 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 1126 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 292 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1134 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 294 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1142 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 298 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 1151 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 300 "parser.mly"
      ( _1 )
# 1158 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AAuth) in
    Obj.repr(
# 302 "parser.mly"
      ( fun ctx -> TmAuas(_2, _1 ctx, _3 ctx))
# 1167 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AAuth) in
    Obj.repr(
# 304 "parser.mly"
      ( fun ctx -> TmRequire(_2, _1 ctx, _3 ctx))
# 1176 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 308 "parser.mly"
      ( fun ctx i -> [] )
# 1182 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 310 "parser.mly"
      ( _1 )
# 1189 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 314 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1196 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 316 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1205 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 320 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1214 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 322 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1221 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 326 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 1231 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 329 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 1241 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 332 "parser.mly"
      ( _1 )
# 1248 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 336 "parser.mly"
      ( _1 )
# 1255 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 344 "parser.mly"
      ( _2 )
# 1264 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 346 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1272 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 349 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1279 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Auth) in
    Obj.repr(
# 351 "parser.mly"
      ( fun ctx -> TmUnit(_1, _3 ctx) )
# 1288 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 353 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1302 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Auth) in
    Obj.repr(
# 356 "parser.mly"
      ( fun ctx -> TmTrue(_1, _3 ctx) )
# 1311 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Auth) in
    Obj.repr(
# 358 "parser.mly"
      ( fun ctx -> TmFalse(_1, _3 ctx) )
# 1320 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 360 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1327 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 362 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1337 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Auth) in
    Obj.repr(
# 365 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i, _3 ctx)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1350 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 371 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1360 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 375 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1367 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 377 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1376 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 381 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1391 "parser.ml"
               : 'Case))
; (fun __caml_parser_env ->
    Obj.repr(
# 387 "parser.mly"
      ( fun ctx i -> [] )
# 1397 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 389 "parser.mly"
      ( _1 )
# 1404 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 393 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1411 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 395 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1420 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 399 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1429 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 401 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1436 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    Obj.repr(
# 405 "parser.mly"
      ( fun ctx -> TyVarBind )
# 1442 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 407 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 1450 "parser.ml"
               : 'TyBinder))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )

type token =
  | IMPORT of (Support.Error.info)
  | TBOT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | TTOP of (Support.Error.info)
  | AS of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | REF of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | RREF of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | SSOURCE of (Support.Error.info)
  | SSINK of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | INERT of (Support.Error.info)
  | TYPE of (Support.Error.info)
  | NAT of (Support.Error.info)
  | UP of (Support.Error.info)
  | DOWN of (Support.Error.info)
  | REQUIRE of (Support.Error.info)
  | AUAS of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 88 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* IMPORT *);
  258 (* TBOT *);
  259 (* LAMBDA *);
  260 (* TTOP *);
  261 (* AS *);
  262 (* USTRING *);
  263 (* UNIT *);
  264 (* REF *);
  265 (* UUNIT *);
  266 (* RREF *);
  267 (* CASE *);
  268 (* OF *);
  269 (* LET *);
  270 (* IN *);
  271 (* FIX *);
  272 (* LETREC *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* BOOL *);
  279 (* TIMESFLOAT *);
  280 (* SSOURCE *);
  281 (* SSINK *);
  282 (* UFLOAT *);
  283 (* SUCC *);
  284 (* PRED *);
  285 (* ISZERO *);
  286 (* INERT *);
  287 (* TYPE *);
  288 (* NAT *);
  289 (* UP *);
  290 (* DOWN *);
  291 (* REQUIRE *);
  292 (* AUAS *);
  293 (* UCID *);
  294 (* LCID *);
  295 (* INTV *);
  296 (* FLOATV *);
  297 (* STRINGV *);
  298 (* APOSTROPHE *);
  299 (* DQUOTE *);
  300 (* ARROW *);
  301 (* BANG *);
  302 (* BARGT *);
  303 (* BARRCURLY *);
  304 (* BARRSQUARE *);
  305 (* COLON *);
  306 (* COLONCOLON *);
  307 (* COLONEQ *);
  308 (* COLONHASH *);
  309 (* COMMA *);
  310 (* DARROW *);
  311 (* DDARROW *);
  312 (* DOT *);
    0 (* EOF *);
  313 (* EQ *);
  314 (* EQEQ *);
  315 (* EXISTS *);
  316 (* GT *);
  317 (* HASH *);
  318 (* LCURLY *);
  319 (* LCURLYBAR *);
  320 (* LEFTARROW *);
  321 (* LPAREN *);
  322 (* LSQUARE *);
  323 (* LSQUAREBAR *);
  324 (* LT *);
  325 (* RCURLY *);
  326 (* RPAREN *);
  327 (* RSQUARE *);
  328 (* SEMI *);
  329 (* SLASH *);
  330 (* STAR *);
  331 (* TRIANGLE *);
  332 (* USCORE *);
  333 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\004\000\004\000\
\007\000\007\000\007\000\009\000\008\000\010\000\010\000\006\000\
\006\000\006\000\006\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\011\000\011\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\017\000\017\000\017\000\017\000\013\000\013\000\
\019\000\019\000\020\000\020\000\016\000\016\000\016\000\021\000\
\021\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\015\000\015\000\023\000\022\000\
\022\000\024\000\024\000\025\000\025\000\005\000\005\000\000\000"

let yylen = "\002\000\
\001\000\003\000\002\000\001\000\002\000\002\000\002\000\002\000\
\001\000\001\000\001\000\004\000\005\000\002\000\002\000\001\000\
\002\000\002\000\002\000\003\000\001\000\001\000\001\000\001\000\
\003\000\001\000\001\000\003\000\001\000\001\000\003\000\001\000\
\001\000\008\000\006\000\003\000\004\000\006\000\006\000\008\000\
\006\000\001\000\002\000\002\000\002\000\002\000\003\000\002\000\
\002\000\002\000\003\000\001\000\003\000\003\000\000\000\001\000\
\001\000\003\000\003\000\001\000\003\000\003\000\001\000\001\000\
\003\000\003\000\001\000\001\000\001\000\007\000\001\000\001\000\
\001\000\003\000\001\000\004\000\001\000\003\000\007\000\000\000\
\001\000\001\000\003\000\003\000\001\000\000\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\072\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\073\000\068\000\000\000\
\001\000\000\000\000\000\000\000\088\000\000\000\004\000\000\000\
\000\000\063\000\000\000\003\000\000\000\000\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\005\000\
\000\000\000\000\085\000\000\000\081\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\022\000\023\000\024\000\000\000\026\000\000\000\000\000\
\029\000\030\000\027\000\000\000\000\000\000\000\000\000\016\000\
\000\000\087\000\007\000\008\000\000\000\074\000\000\000\000\000\
\066\000\000\000\002\000\000\000\061\000\062\000\051\000\000\000\
\054\000\053\000\000\000\000\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\017\000\018\000\019\000\000\000\060\000\
\000\000\056\000\000\000\000\000\000\000\076\000\000\000\084\000\
\083\000\065\000\000\000\014\000\015\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\
\020\000\025\000\031\000\000\000\000\000\000\000\009\000\010\000\
\011\000\035\000\000\000\078\000\038\000\039\000\000\000\041\000\
\059\000\058\000\000\000\000\000\000\000\000\000\000\000\070\000\
\000\000\000\000\034\000\000\000\040\000\000\000\012\000\000\000\
\013\000\000\000"

let yydgoto = "\002\000\
\029\000\030\000\031\000\056\000\053\000\128\000\158\000\159\000\
\160\000\161\000\096\000\097\000\129\000\032\000\118\000\033\000\
\034\000\035\000\130\000\131\000\064\000\060\000\119\000\061\000\
\062\000"

let yysindex = "\045\000\
\001\000\000\000\006\255\225\254\000\000\225\000\228\002\246\254\
\225\000\010\255\228\002\000\000\000\000\225\000\225\000\225\000\
\225\000\239\254\250\254\237\254\000\000\000\000\000\000\225\000\
\000\000\015\003\228\002\015\255\000\000\243\254\000\000\097\000\
\008\255\000\000\020\255\000\000\021\255\026\255\000\000\008\255\
\057\255\019\255\023\255\008\255\028\255\064\255\161\000\008\255\
\008\255\008\255\165\255\165\255\000\000\165\255\228\002\000\000\
\008\255\031\255\000\000\014\255\000\000\036\255\025\255\030\255\
\034\255\001\000\214\255\008\255\254\254\165\255\055\255\055\255\
\165\255\165\255\027\255\228\002\228\002\165\255\228\002\008\255\
\000\000\000\000\000\000\000\000\185\002\000\000\185\002\185\002\
\000\000\000\000\000\000\158\002\165\255\158\002\032\255\000\000\
\049\255\000\000\000\000\000\000\228\002\000\000\015\003\228\002\
\000\000\228\002\000\000\225\000\000\000\000\000\000\000\242\254\
\000\000\000\000\029\255\050\255\069\255\000\000\033\255\091\255\
\094\255\052\255\093\255\000\000\000\000\000\000\065\255\000\000\
\044\255\000\000\062\255\046\255\058\255\000\000\185\002\000\000\
\000\000\000\000\059\255\000\000\000\000\224\254\228\002\060\255\
\027\255\228\002\228\002\228\002\228\002\165\255\000\000\158\002\
\000\000\000\000\000\000\117\255\224\254\068\255\000\000\000\000\
\000\000\000\000\087\255\000\000\000\000\000\000\112\255\000\000\
\000\000\000\000\165\255\226\254\228\002\070\255\228\002\000\000\
\224\254\055\255\000\000\073\255\000\000\061\255\000\000\214\255\
\000\000\225\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\063\255\022\255\000\000\000\000\000\000\000\000\
\000\000\071\255\000\000\000\000\000\000\000\000\000\000\067\255\
\101\000\000\000\037\000\000\000\000\000\000\000\000\000\165\000\
\000\000\000\000\000\000\229\000\000\000\000\000\000\000\037\001\
\101\001\165\001\000\000\000\000\000\000\000\000\000\000\000\000\
\229\001\052\003\000\000\000\000\000\000\076\255\077\255\000\000\
\000\000\000\000\000\000\037\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\101\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\080\255\000\000\074\255\000\000\000\000\
\143\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\075\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\219\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\132\002"

let yygindex = "\000\000\
\063\000\000\000\251\255\000\000\000\000\217\255\123\255\000\000\
\000\000\201\255\254\255\236\255\052\000\193\255\006\000\250\255\
\000\000\000\000\002\000\000\000\048\000\000\000\000\000\050\000\
\000\000"

let yytablesize = 1145
let yytable = "\040\000\
\025\000\041\000\044\000\108\000\112\000\046\000\037\000\047\000\
\048\000\049\000\050\000\095\000\098\000\177\000\099\000\113\000\
\114\000\057\000\140\000\141\000\059\000\063\000\057\000\172\000\
\070\000\068\000\067\000\042\000\067\000\054\000\111\000\057\000\
\157\000\115\000\116\000\109\000\110\000\055\000\122\000\178\000\
\080\000\067\000\067\000\182\000\038\000\001\000\036\000\045\000\
\051\000\100\000\052\000\067\000\065\000\132\000\071\000\072\000\
\067\000\067\000\066\000\067\000\067\000\067\000\067\000\069\000\
\124\000\043\000\125\000\126\000\075\000\073\000\120\000\121\000\
\067\000\123\000\074\000\076\000\078\000\067\000\033\000\077\000\
\033\000\079\000\102\000\067\000\033\000\033\000\067\000\101\000\
\103\000\067\000\106\000\112\000\135\000\067\000\117\000\136\000\
\104\000\059\000\063\000\105\000\139\000\068\000\134\000\142\000\
\146\000\143\000\144\000\147\000\148\000\145\000\169\000\149\000\
\151\000\150\000\152\000\153\000\163\000\154\000\156\000\033\000\
\186\000\171\000\183\000\173\000\174\000\175\000\033\000\184\000\
\107\000\180\000\185\000\176\000\155\000\055\000\086\000\033\000\
\033\000\162\000\033\000\080\000\165\000\166\000\167\000\168\000\
\082\000\133\000\064\000\032\000\055\000\032\000\164\000\138\000\
\137\000\170\000\032\000\000\000\032\000\000\000\000\000\000\000\
\032\000\032\000\032\000\032\000\000\000\000\000\081\000\179\000\
\082\000\181\000\083\000\000\000\032\000\084\000\085\000\000\000\
\000\000\032\000\032\000\068\000\032\000\032\000\032\000\032\000\
\000\000\000\000\086\000\000\000\087\000\088\000\089\000\000\000\
\000\000\032\000\000\000\032\000\090\000\000\000\032\000\032\000\
\000\000\091\000\032\000\000\000\032\000\000\000\000\000\032\000\
\000\000\000\000\032\000\032\000\032\000\032\000\032\000\000\000\
\000\000\032\000\000\000\032\000\005\000\006\000\000\000\000\000\
\000\000\000\000\092\000\000\000\009\000\093\000\000\000\000\000\
\094\000\012\000\013\000\000\000\014\000\000\000\000\000\000\000\
\015\000\016\000\017\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\021\000\022\000\023\000\000\000\
\000\000\003\000\024\000\004\000\000\000\000\000\000\000\005\000\
\006\000\000\000\000\000\007\000\000\000\008\000\000\000\009\000\
\010\000\011\000\000\000\026\000\012\000\013\000\027\000\014\000\
\000\000\028\000\000\000\015\000\016\000\017\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\020\000\021\000\
\022\000\023\000\000\000\052\000\000\000\024\000\000\000\000\000\
\052\000\000\000\052\000\000\000\000\000\000\000\052\000\052\000\
\052\000\052\000\000\000\000\000\000\000\000\000\026\000\000\000\
\000\000\027\000\052\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\052\000\052\000\052\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\052\000\
\000\000\052\000\000\000\000\000\052\000\000\000\000\000\000\000\
\052\000\000\000\052\000\000\000\000\000\052\000\000\000\005\000\
\052\000\052\000\052\000\042\000\052\000\000\000\000\000\000\000\
\042\000\052\000\042\000\000\000\012\000\013\000\042\000\042\000\
\042\000\042\000\000\000\000\000\000\000\000\000\018\000\000\000\
\000\000\000\000\042\000\000\000\000\000\000\000\039\000\021\000\
\022\000\023\000\042\000\042\000\042\000\042\000\000\000\000\000\
\000\000\000\000\000\000\067\000\000\000\000\000\000\000\042\000\
\000\000\042\000\000\000\000\000\000\000\000\000\026\000\000\000\
\042\000\027\000\042\000\000\000\028\000\042\000\000\000\005\000\
\042\000\042\000\042\000\044\000\042\000\000\000\000\000\000\000\
\044\000\042\000\044\000\000\000\012\000\013\000\044\000\044\000\
\044\000\044\000\000\000\000\000\000\000\000\000\018\000\000\000\
\000\000\000\000\044\000\000\000\000\000\000\000\039\000\021\000\
\022\000\023\000\044\000\044\000\044\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\069\000\044\000\000\000\000\000\000\000\000\000\026\000\000\000\
\044\000\027\000\044\000\000\000\028\000\044\000\000\000\005\000\
\044\000\044\000\044\000\046\000\044\000\000\000\000\000\000\000\
\046\000\044\000\046\000\000\000\012\000\013\000\046\000\046\000\
\046\000\046\000\000\000\000\000\000\000\000\000\018\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\039\000\021\000\
\022\000\023\000\046\000\046\000\046\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\046\000\
\036\000\046\000\000\000\000\000\036\000\036\000\026\000\000\000\
\046\000\027\000\046\000\000\000\028\000\046\000\000\000\000\000\
\046\000\046\000\046\000\048\000\046\000\000\000\000\000\000\000\
\048\000\046\000\048\000\000\000\000\000\000\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\048\000\000\000\000\000\000\000\036\000\000\000\
\000\000\000\000\048\000\048\000\048\000\048\000\000\000\036\000\
\036\000\000\000\036\000\000\000\000\000\000\000\077\000\048\000\
\077\000\048\000\000\000\000\000\077\000\077\000\000\000\000\000\
\048\000\000\000\048\000\000\000\000\000\048\000\000\000\000\000\
\048\000\048\000\048\000\049\000\048\000\000\000\000\000\000\000\
\049\000\048\000\049\000\000\000\000\000\000\000\049\000\049\000\
\049\000\049\000\000\000\000\000\000\000\000\000\000\000\077\000\
\000\000\000\000\049\000\000\000\000\000\000\000\077\000\000\000\
\000\000\000\000\049\000\049\000\049\000\049\000\000\000\077\000\
\077\000\000\000\077\000\000\000\000\000\000\000\000\000\049\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\000\000\049\000\000\000\000\000\049\000\000\000\000\000\
\049\000\049\000\049\000\050\000\049\000\000\000\000\000\000\000\
\050\000\049\000\050\000\000\000\000\000\000\000\050\000\050\000\
\050\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\050\000\050\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\000\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\050\000\000\000\000\000\050\000\000\000\000\000\
\050\000\050\000\050\000\045\000\050\000\000\000\000\000\000\000\
\045\000\050\000\045\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\045\000\000\000\000\000\045\000\000\000\000\000\
\045\000\045\000\045\000\043\000\045\000\000\000\000\000\000\000\
\043\000\045\000\043\000\000\000\000\000\000\000\043\000\043\000\
\043\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\043\000\043\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\000\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\000\000\043\000\000\000\000\000\043\000\000\000\000\000\
\043\000\043\000\043\000\047\000\043\000\000\000\000\000\000\000\
\047\000\043\000\047\000\000\000\000\000\000\000\047\000\047\000\
\047\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\047\000\047\000\047\000\000\000\079\000\
\000\000\079\000\000\000\000\000\000\000\079\000\079\000\047\000\
\000\000\047\000\000\000\000\000\000\000\000\000\000\000\081\000\
\047\000\082\000\047\000\083\000\000\000\047\000\084\000\085\000\
\047\000\047\000\047\000\000\000\047\000\000\000\000\000\000\000\
\000\000\047\000\000\000\086\000\000\000\087\000\088\000\089\000\
\079\000\000\000\081\000\000\000\082\000\090\000\083\000\079\000\
\000\000\084\000\091\000\127\000\000\000\000\000\000\000\000\000\
\079\000\079\000\000\000\079\000\000\000\000\000\086\000\000\000\
\079\000\000\000\089\000\000\000\000\000\000\000\000\000\000\000\
\090\000\000\000\000\000\092\000\000\000\091\000\093\000\000\000\
\000\000\094\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\000\000\005\000\006\000\000\000\000\000\007\000\000\000\
\008\000\000\000\009\000\010\000\011\000\000\000\092\000\012\000\
\013\000\093\000\014\000\000\000\094\000\000\000\015\000\016\000\
\017\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\021\000\022\000\023\000\000\000\000\000\000\000\
\024\000\004\000\000\000\000\000\000\000\005\000\006\000\000\000\
\000\000\007\000\000\000\008\000\000\000\009\000\010\000\011\000\
\000\000\026\000\012\000\013\000\027\000\014\000\000\000\028\000\
\000\000\015\000\016\000\017\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\000\021\000\022\000\023\000\
\067\000\000\000\067\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\067\000\000\000\000\000\000\000\026\000\000\000\000\000\027\000\
\000\000\067\000\028\000\000\000\000\000\000\000\067\000\067\000\
\000\000\067\000\067\000\067\000\067\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\000\000\
\067\000\000\000\000\000\067\000\000\000\000\000\000\000\000\000\
\000\000\067\000\000\000\000\000\067\000\000\000\000\000\067\000\
\067\000"

let yycheck = "\006\000\
\000\000\007\000\009\000\067\000\037\001\011\000\038\001\014\000\
\015\000\016\000\017\000\051\000\052\000\044\001\054\000\071\000\
\072\000\024\000\033\001\034\001\026\000\027\000\060\001\157\000\
\005\001\032\000\005\001\038\001\007\001\049\001\070\000\069\001\
\065\001\073\000\074\000\038\001\039\001\057\001\078\000\070\001\
\047\000\020\001\021\001\177\000\076\001\001\000\041\001\038\001\
\066\001\055\000\057\001\030\001\038\001\093\000\035\001\036\001\
\035\001\036\001\072\001\038\001\039\001\040\001\041\001\056\001\
\085\000\076\001\087\000\088\000\012\001\049\001\076\000\077\000\
\051\001\079\000\049\001\057\001\049\001\056\001\012\001\057\001\
\014\001\018\001\069\001\062\001\018\001\019\001\065\001\057\001\
\053\001\068\001\057\001\037\001\044\001\072\001\068\001\101\000\
\072\001\103\000\104\000\070\001\106\000\108\000\071\001\075\001\
\014\001\056\001\038\001\014\001\057\001\077\001\150\000\019\001\
\069\001\049\001\053\001\070\001\057\001\060\001\060\001\053\001\
\184\000\005\001\178\000\056\001\038\001\014\001\060\001\055\001\
\066\000\060\001\070\001\171\000\135\000\060\001\072\001\069\001\
\070\001\143\000\072\001\069\001\146\000\147\000\148\000\149\000\
\069\001\094\000\070\001\005\001\069\001\007\001\145\000\104\000\
\103\000\152\000\012\001\255\255\014\001\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\255\255\255\255\002\001\173\000\
\004\001\175\000\006\001\255\255\030\001\009\001\010\001\255\255\
\255\255\035\001\036\001\186\000\038\001\039\001\040\001\041\001\
\255\255\255\255\022\001\255\255\024\001\025\001\026\001\255\255\
\255\255\051\001\255\255\053\001\032\001\255\255\056\001\057\001\
\255\255\037\001\060\001\255\255\062\001\255\255\255\255\065\001\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\255\255\075\001\255\255\077\001\007\001\008\001\255\255\255\255\
\255\255\255\255\062\001\255\255\015\001\065\001\255\255\255\255\
\068\001\020\001\021\001\255\255\023\001\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\040\001\041\001\255\255\
\255\255\001\001\045\001\003\001\255\255\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\062\001\020\001\021\001\065\001\023\001\
\255\255\068\001\255\255\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\255\255\007\001\255\255\045\001\255\255\255\255\
\012\001\255\255\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\062\001\255\255\
\255\255\065\001\030\001\255\255\068\001\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\051\001\
\255\255\053\001\255\255\255\255\056\001\255\255\255\255\255\255\
\060\001\255\255\062\001\255\255\255\255\065\001\255\255\007\001\
\068\001\069\001\070\001\007\001\072\001\255\255\255\255\255\255\
\012\001\077\001\014\001\255\255\020\001\021\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\038\001\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\255\255\255\255\051\001\
\255\255\053\001\255\255\255\255\255\255\255\255\062\001\255\255\
\060\001\065\001\062\001\255\255\068\001\065\001\255\255\007\001\
\068\001\069\001\070\001\007\001\072\001\255\255\255\255\255\255\
\012\001\077\001\014\001\255\255\020\001\021\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\038\001\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\051\001\
\056\001\053\001\255\255\255\255\255\255\255\255\062\001\255\255\
\060\001\065\001\062\001\255\255\068\001\065\001\255\255\007\001\
\068\001\069\001\070\001\007\001\072\001\255\255\255\255\255\255\
\012\001\077\001\014\001\255\255\020\001\021\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\038\001\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\012\001\051\001\
\014\001\053\001\255\255\255\255\018\001\019\001\062\001\255\255\
\060\001\065\001\062\001\255\255\068\001\065\001\255\255\255\255\
\068\001\069\001\070\001\007\001\072\001\255\255\255\255\255\255\
\012\001\077\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\255\255\030\001\255\255\255\255\255\255\060\001\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\255\255\069\001\
\070\001\255\255\072\001\255\255\255\255\255\255\012\001\051\001\
\014\001\053\001\255\255\255\255\018\001\019\001\255\255\255\255\
\060\001\255\255\062\001\255\255\255\255\065\001\255\255\255\255\
\068\001\069\001\070\001\007\001\072\001\255\255\255\255\255\255\
\012\001\077\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\255\255\030\001\255\255\255\255\255\255\060\001\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\255\255\069\001\
\070\001\255\255\072\001\255\255\255\255\255\255\255\255\051\001\
\255\255\053\001\255\255\255\255\255\255\255\255\255\255\255\255\
\060\001\255\255\062\001\255\255\255\255\065\001\255\255\255\255\
\068\001\069\001\070\001\007\001\072\001\255\255\255\255\255\255\
\012\001\077\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\051\001\
\255\255\053\001\255\255\255\255\255\255\255\255\255\255\255\255\
\060\001\255\255\062\001\255\255\255\255\065\001\255\255\255\255\
\068\001\069\001\070\001\007\001\072\001\255\255\255\255\255\255\
\012\001\077\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\051\001\
\255\255\053\001\255\255\255\255\255\255\255\255\255\255\255\255\
\060\001\255\255\062\001\255\255\255\255\065\001\255\255\255\255\
\068\001\069\001\070\001\007\001\072\001\255\255\255\255\255\255\
\012\001\077\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\051\001\
\255\255\053\001\255\255\255\255\255\255\255\255\255\255\255\255\
\060\001\255\255\062\001\255\255\255\255\065\001\255\255\255\255\
\068\001\069\001\070\001\007\001\072\001\255\255\255\255\255\255\
\012\001\077\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\255\255\012\001\
\255\255\014\001\255\255\255\255\255\255\018\001\019\001\051\001\
\255\255\053\001\255\255\255\255\255\255\255\255\255\255\002\001\
\060\001\004\001\062\001\006\001\255\255\065\001\009\001\010\001\
\068\001\069\001\070\001\255\255\072\001\255\255\255\255\255\255\
\255\255\077\001\255\255\022\001\255\255\024\001\025\001\026\001\
\053\001\255\255\002\001\255\255\004\001\032\001\006\001\060\001\
\255\255\009\001\037\001\038\001\255\255\255\255\255\255\255\255\
\069\001\070\001\255\255\072\001\255\255\255\255\022\001\255\255\
\077\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\032\001\255\255\255\255\062\001\255\255\037\001\065\001\255\255\
\255\255\068\001\255\255\255\255\255\255\255\255\003\001\255\255\
\255\255\255\255\007\001\008\001\255\255\255\255\011\001\255\255\
\013\001\255\255\015\001\016\001\017\001\255\255\062\001\020\001\
\021\001\065\001\023\001\255\255\068\001\255\255\027\001\028\001\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\255\255\255\255\255\255\
\045\001\003\001\255\255\255\255\255\255\007\001\008\001\255\255\
\255\255\011\001\255\255\013\001\255\255\015\001\016\001\017\001\
\255\255\062\001\020\001\021\001\065\001\023\001\255\255\068\001\
\255\255\027\001\028\001\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\038\001\039\001\040\001\041\001\
\005\001\255\255\007\001\045\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\255\255\255\255\255\255\062\001\255\255\255\255\065\001\
\255\255\030\001\068\001\255\255\255\255\255\255\035\001\036\001\
\255\255\038\001\039\001\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\051\001\255\255\
\053\001\255\255\255\255\056\001\255\255\255\255\255\255\255\255\
\255\255\062\001\255\255\255\255\065\001\255\255\255\255\068\001\
\069\001"

let yynames_const = "\
  "

let yynames_block = "\
  IMPORT\000\
  TBOT\000\
  LAMBDA\000\
  TTOP\000\
  AS\000\
  USTRING\000\
  UNIT\000\
  REF\000\
  UUNIT\000\
  RREF\000\
  CASE\000\
  OF\000\
  LET\000\
  IN\000\
  FIX\000\
  LETREC\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  TIMESFLOAT\000\
  SSOURCE\000\
  SSINK\000\
  UFLOAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  INERT\000\
  TYPE\000\
  NAT\000\
  UP\000\
  DOWN\000\
  REQUIRE\000\
  AUAS\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 135 "parser.mly"
      ( fun ctx -> [],ctx )
# 673 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 137 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 685 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 144 "parser.mly"
                   ( fun ctx -> (Import(_2.v)),ctx )
# 693 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 146 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 700 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 148 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 708 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 150 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 716 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 155 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 724 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 157 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 732 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowAuth) in
    Obj.repr(
# 162 "parser.mly"
        ( _1 )
# 739 "parser.ml"
               : 'Auth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CompAuth) in
    Obj.repr(
# 164 "parser.mly"
        ( _1 )
# 746 "parser.ml"
               : 'Auth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AAuth) in
    Obj.repr(
# 166 "parser.mly"
        ( fun ctx -> AuAtom(_1 ctx) )
# 753 "parser.ml"
               : 'Auth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Auth) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'AAuth) in
    Obj.repr(
# 170 "parser.mly"
        ( fun ctx -> AuComp(_2 ctx, _4 ctx) )
# 763 "parser.ml"
               : 'CompAuth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'Auth) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Auth) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 174 "parser.mly"
        ( fun ctx -> AuArr(_2 ctx, _4 ctx) )
# 774 "parser.ml"
               : 'ArrowAuth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 178 "parser.mly"
        ( fun ctx -> AuAtomUp(_1.v))
# 782 "parser.ml"
               : 'AAuth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 180 "parser.mly"
        ( fun ctx -> AuAtomDown(_1.v))
# 790 "parser.ml"
               : 'AAuth))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 186 "parser.mly"
                ( _1 )
# 797 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 188 "parser.mly"
      ( fun ctx -> TyRef(_2 ctx) )
# 805 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 190 "parser.mly"
      ( fun ctx -> TySource(_2 ctx) )
# 813 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 192 "parser.mly"
      ( fun ctx -> TySink(_2 ctx) )
# 821 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 197 "parser.mly"
           ( _2 )
# 830 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 199 "parser.mly"
      ( fun ctx -> TyBot )
# 837 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 201 "parser.mly"
      ( fun ctx -> TyTop )
# 844 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 203 "parser.mly"
      ( fun ctx -> TyString )
# 851 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 205 "parser.mly"
      ( fun ctx -> TyUnit )
# 858 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 207 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 868 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 210 "parser.mly"
      ( fun ctx -> TyBool )
# 875 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 212 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 886 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 218 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 896 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 221 "parser.mly"
      ( fun ctx -> TyFloat )
# 903 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 223 "parser.mly"
      ( fun ctx -> TyNat )
# 910 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 229 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 919 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 231 "parser.mly"
            ( _1 )
# 926 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 235 "parser.mly"
      ( _1 )
# 933 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Auth) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 237 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _8 ctx1) )
# 949 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 241 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 963 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 245 "parser.mly"
      ( fun ctx -> TmAssign(_2, _1 ctx, _3 ctx) )
# 972 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 247 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 983 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 250 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 995 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 252 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 1007 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 254 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 1024 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 259 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 1036 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 263 "parser.mly"
      ( _1 )
# 1043 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 265 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 1054 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 270 "parser.mly"
      ( fun ctx -> TmRef(_1, _2 ctx) )
# 1062 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 272 "parser.mly"
      ( fun ctx -> TmDeref(_1, _2 ctx) )
# 1070 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 274 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 1079 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 277 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 1088 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 279 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 1096 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 281 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1104 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 283 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1112 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 287 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 1121 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 289 "parser.mly"
      ( _1 )
# 1128 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AAuth) in
    Obj.repr(
# 291 "parser.mly"
      ( fun ctx -> TmAuas(_2, _1 ctx, AuAtom(_3 ctx)))
# 1137 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AAuth) in
    Obj.repr(
# 293 "parser.mly"
      ( fun ctx -> TmRequire(_2, _1 ctx, AuAtom(_3 ctx)))
# 1146 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 297 "parser.mly"
      ( fun ctx i -> [] )
# 1152 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 299 "parser.mly"
      ( _1 )
# 1159 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 303 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1166 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 305 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1175 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 309 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1184 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 311 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1191 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 315 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 1201 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 318 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 1211 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 321 "parser.mly"
      ( _1 )
# 1218 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 325 "parser.mly"
      ( _1 )
# 1225 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 327 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 1235 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 333 "parser.mly"
      ( _2 )
# 1244 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 335 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1252 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 338 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1259 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 340 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1266 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 342 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1280 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 345 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1287 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 347 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1294 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 349 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1301 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 351 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1311 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 354 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1322 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 360 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1332 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 364 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1339 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 366 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1348 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 370 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1363 "parser.ml"
               : 'Case))
; (fun __caml_parser_env ->
    Obj.repr(
# 376 "parser.mly"
      ( fun ctx i -> [] )
# 1369 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 378 "parser.mly"
      ( _1 )
# 1376 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 382 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1383 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 384 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1392 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 388 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1401 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 390 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1408 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    Obj.repr(
# 394 "parser.mly"
      ( fun ctx -> TyVarBind )
# 1414 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 396 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 1422 "parser.ml"
               : 'TyBinder))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
